#!/usr/bin/env python

import re
import sys
import subprocess
import argparse

def main(args):
    lo = args.lo  # MTUs lower or equal do work
    hi = args.hi  # MTUs greater or equal don't work

    while lo + 1 < hi:
        mid = (lo + hi) // 2
        
        try:
            out = subprocess.check_output([
                '/usr/bin/ping',
                '-M', 'do',
                '-c', str(args.pings_per_step),
                '-w', str(args.step_timeout_sec),
                '-i', str(args.ping_interval_sec),
                '-n',
                '-s', str(mid),
                args.target,
            ], stderr=subprocess.STDOUT).decode('utf8')

            match = re.search(r'(\d+)% packet loss', out)
            packet_loss = float(match.group(1))

            print('%d: %.1f %% packet loss' % (mid, packet_loss))
            lo = mid

        except subprocess.CalledProcessError:
            print('%d: * * *' % mid)
            hi = mid

    print('>>> optimal MTU: %d + 28 = %d' % (lo, lo+28))

if __name__ == '__main__':
    p = argparse.ArgumentParser(description='Perform path MTU discovery.')

    p.add_argument('target',
        help='IP address or hostname to ping')

    p.add_argument('-l', metavar='MTU', dest='lo', type=int, default=0,
        help='lower bound of the search range [%(default)s]')
    p.add_argument('-u', metavar='MTU', dest='hi', type=int, default=1500,
        help='upper bound of the search range [%(default)s]')
    p.add_argument('-c', metavar='COUNT', dest='pings_per_step', type=int, default=5,
        help='pings per step [%(default)s]')
    p.add_argument('-w', metavar='SECONDS', dest='step_timeout_sec', type=int, default=10,
        help='step timeout [%(default)s]')
    p.add_argument('-i', metavar='SECONDS', dest='ping_interval_sec', type=float, default=0.2,
        help='ping interval [%(default)s]')

    args = p.parse_args()
    main(args)
